Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression BINOP expression
Rule 2     expression -> ( expression )
Rule 3     expression -> TEXT COMPARATOR literal
Rule 4     literal -> TEXT
Rule 5     literal -> STRING

Terminals, with rules where they appear

(                    : 2
)                    : 2
BINOP                : 1
COMPARATOR           : 3
STRING               : 5
TEXT                 : 3 4
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 0
literal              : 3

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression BINOP expression
    (2) expression -> . ( expression )
    (3) expression -> . TEXT COMPARATOR literal

    (               shift and go to state 1
    TEXT            shift and go to state 2

    expression                     shift and go to state 3

state 1

    (2) expression -> ( . expression )
    (1) expression -> . expression BINOP expression
    (2) expression -> . ( expression )
    (3) expression -> . TEXT COMPARATOR literal

    (               shift and go to state 1
    TEXT            shift and go to state 2

    expression                     shift and go to state 4

state 2

    (3) expression -> TEXT . COMPARATOR literal

    COMPARATOR      shift and go to state 5


state 3

    (0) S' -> expression .
    (1) expression -> expression . BINOP expression

    BINOP           shift and go to state 6


state 4

    (2) expression -> ( expression . )
    (1) expression -> expression . BINOP expression

    )               shift and go to state 7
    BINOP           shift and go to state 6


state 5

    (3) expression -> TEXT COMPARATOR . literal
    (4) literal -> . TEXT
    (5) literal -> . STRING

    TEXT            shift and go to state 8
    STRING          shift and go to state 10

    literal                        shift and go to state 9

state 6

    (1) expression -> expression BINOP . expression
    (1) expression -> . expression BINOP expression
    (2) expression -> . ( expression )
    (3) expression -> . TEXT COMPARATOR literal

    (               shift and go to state 1
    TEXT            shift and go to state 2

    expression                     shift and go to state 11

state 7

    (2) expression -> ( expression ) .

    BINOP           reduce using rule 2 (expression -> ( expression ) .)
    $end            reduce using rule 2 (expression -> ( expression ) .)
    )               reduce using rule 2 (expression -> ( expression ) .)


state 8

    (4) literal -> TEXT .

    BINOP           reduce using rule 4 (literal -> TEXT .)
    $end            reduce using rule 4 (literal -> TEXT .)
    )               reduce using rule 4 (literal -> TEXT .)


state 9

    (3) expression -> TEXT COMPARATOR literal .

    BINOP           reduce using rule 3 (expression -> TEXT COMPARATOR literal .)
    $end            reduce using rule 3 (expression -> TEXT COMPARATOR literal .)
    )               reduce using rule 3 (expression -> TEXT COMPARATOR literal .)


state 10

    (5) literal -> STRING .

    BINOP           reduce using rule 5 (literal -> STRING .)
    $end            reduce using rule 5 (literal -> STRING .)
    )               reduce using rule 5 (literal -> STRING .)


state 11

    (1) expression -> expression BINOP expression .
    (1) expression -> expression . BINOP expression

    BINOP           reduce using rule 1 (expression -> expression BINOP expression .)
    $end            reduce using rule 1 (expression -> expression BINOP expression .)
    )               reduce using rule 1 (expression -> expression BINOP expression .)

  ! BINOP           [ shift and go to state 6 ]

